// cheatsheet : https://pest.rs/book/grammars/syntax.html#cheat-sheet

// ignore non-significant whitespace
WHITESPACE = _{ whitespace | newline }

// line comments and block comments
// note: we do not ignore comments as we need to parse them for formatting
comment  = @{ "//" ~ (!newline ~ ANY)* ~ newline }
doc = @{"///" ~ (!newline ~ ANY)* ~ newline }

// common regexes required for denoting the grammar
whitespace = _{ " " | "\t" }
newline = _{ "\n" | "\r\n" | "\r" }
alphabet = _{ 'a'..'z' | 'A'..'Z' }
underscore = _{ "_" }
digit = _{ '0'..'9' }

id = @{ (alphabet|underscore) ~ (alphabet|digit|underscore)* }
idx = @{ (alphabet|underscore) ~ (alphabet|digit|underscore)* ~ ("'")* }
ids = { id ~ ("," ~ id)* }

start = { "" }
end = { "" }

//
// Grammar
//

file = { SOI ~ use* ~ (!doc ~ comment|entities)* ~ EOI}

use = { start ~ "use" ~ id ~ (("." ~ id)+)? ~ ("as" ~ id)? ~  end}

entities = { module|function|struct }
expressions = { assignment|expression }

module = { start ~ doc* ~ scope? ~ "module" ~ id ~ "{" ~ (entities)* ~ "}" ~ end }
function = { start ~ doc* ~ scope? ~ "fn" ~ id ~ "(" ~ ")" ~ ":"? ~ type? ~ "{" ~ (!doc ~ comment|expressions)* ~"}" ~ end }
struct = { start ~ doc* ~ scope? ~ "struct" ~ id ~ "{" ~ value+ ~ "}" ~ end }

assignment = { start ~ "let" ~ idx ~ assignment_specifier ~ digit+ ~ ";"? ~ end }
value = { start ~ doc* ~ scope? ~ ids ~ ":"? ~ type ~ ","? ~ end }
expression = { idx }

scope = _{ visible | hidden }
visible = { "vis" }
hidden = { "" }

assignment_specifier = _{ constant_assignment | variable_assignment }
constant_assignment = { "=" }
variable_assignment = { ":=" }

unit = { "(" ~ ")" }
usize = { "usize" }
float = { "float" }
string = { "string" }

type = _{ unit | usize | float | string }
