// cheatsheet : https://pest.rs/book/grammars/syntax.html#cheat-sheet

// ignore non-significant whitespace
WHITESPACE = _{ whitespace | newline }

// line comments and block comments
// note: we do not ignore comments as we need to parse them for formatting
comment  = @{ "//" ~ (!newline ~ ANY)* ~ newline }
doc = @{"///" ~ (!newline ~ ANY)* ~ newline }

// common regexes required for denoting the grammar
whitespace = _{ " " | "\t" }
newline = _{ "\n" | "\r\n" | "\r" }
alphabet = _{ 'a'..'z' | 'A'..'Z' }
underscore = _{ "_" }
digit = _{ '0'..'9' }

id = { (alphabet|underscore) ~ (alphabet|digit|underscore)* ~ ("'")* }
ids = { id ~ ("," ~ id)* }

//
// Grammar
//

file = { SOI ~ (!doc ~ comment|entities)* ~ EOI}

entities = { module|function|struct }
expressions = { assignment|expression }

module = { doc* ~ "module" ~ scope? ~ id ~ "{" ~ (entities)* ~ "}" }
function = { doc* ~ "fn" ~ scope? ~ id ~ "(" ~ ")" ~ ":"? ~ type? ~ "{" ~ (!doc ~ comment|expressions)* ~"}" }
struct = { doc* ~ "struct" ~ scope? ~ id ~ "{" ~ value+ ~ "}"}

assignment = { "let" ~ id ~ assignment_specifier ~ digit+ ~ ";"? }
value = { doc* ~ ids  ~ scope? ~ ":"? ~ type ~ ","? }
expression = { id }

scope = _{ global|local|static }
static = { "" }
global = { "*" }
local = { "+" }

assignment_specifier = _{ constant_assignment | variable_assignment }
constant_assignment = { "=" }
variable_assignment = { ":=" }

unit = { "(" ~ ")" }
usize = { "usize" }
float = { "float" }
string = { "string" }

type = _{ unit | usize | float | string }