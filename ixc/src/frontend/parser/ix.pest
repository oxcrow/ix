// cheatsheet : https://pest.rs/book/grammars/syntax.html#cheat-sheet

// ignore non-significant whitespace
WHITESPACE = _{ whitespace | newline }

// line comments and block comments
// note: we do not ignore comments as we need to parse them for formatting
comment  = @{ "//" ~ (!newline ~ ANY)* ~ newline }
doc = @{"///" ~ (!newline ~ ANY)* ~ newline }

// common regexes required for denoting the grammar
whitespace = _{ " " | "\t" }
newline = _{ "\n" | "\r\n" | "\r" }
alphabet = _{ 'a'..'z' | 'A'..'Z' }
underscore = _{ "_" }
digit = _{ '0'..'9' }

id = @{ (alphabet|underscore) ~ (alphabet|digit|underscore)* }
idx = @{ (alphabet|underscore) ~ (alphabet|digit|underscore)* ~ ("'")* }
ids = { id ~ ("," ~ id)* }

integer = @{ digit+ }
floating = @{ (digit+ ~ "." ~ digit+) | (digit+ ~ "." ~ digit+ ~ "E" ~ ("+"|"-") ~ digit+) }

plus = { "+" }
minus = {  "-" }
star = { "*" }
slash = { "/" }
starstar = { "**" }

//
// Grammar
//

file = { SOI ~ use* ~ (!doc ~ comment|entities)* ~ EOI}

use = { "use" ~ id ~ (("." ~ id)+)? ~ ("as" ~ id)? }
entities = { module|function|struct }
expressions = { assignment|return|("~" ~ idx)|expression }

module = { doc* ~ scope? ~ "module" ~ id ~ "{" ~ (entities)* ~ "}" }
function = { doc* ~ scope? ~ "fn" ~ id ~ "(" ~ ")" ~ ":"? ~ type? ~ "{" ~ (!doc ~ comment|expressions)* ~"}" }
struct = { doc* ~ scope? ~ "struct" ~ id ~ "{" ~ value+ ~ "}" }

assignment = { "let" ~ idx ~ assignment_specifier ~ expression ~ ";"? }
return = { "return" ~ expression }
value = { doc* ~ scope? ~ ids ~ ":"? ~ type ~ ","? }
expression = { ((idx|integer|floating) ~ ((plus|minus|star|slash|starstar) ~ (idx|integer|floating))+) | (idx|integer|floating) }

scope = _{ visible | hidden }
visible = { "vis" }
hidden = { "" }

assignment_specifier = _{ constant_assignment | variable_assignment }
constant_assignment = { "=" }
variable_assignment = { ":=" }

unit = { "(" ~ ")" }
usize = { "usize" }
float = { "float" }
str = { "str" }
i8 = { "i8" }
u8 = { "u8" }
i16 = { "i16" }
u16 = { "u16" }
i32 = { "i32" }
u32 = { "u32" }
i64 = { "i64" }
u64 = { "u64" }
f32 = { "f32" }
f64 = { "f64" }

type = _{ unit | usize | float | str | i8 | u8 | i16 | u16 | i32 | u32 | i64 | u64 | f32 | f64 }
